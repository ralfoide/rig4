import org.ajoberstar.grgit.Grgit

plugins {
    id "java"
    id "org.ajoberstar.grgit" version "2.1.0"
}

group "com.alflabs.rig4"
version "0.1-Exp"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

ext.dagger = [
        generatedSrcDir: "src/dagger/java"
]

dependencies {
    compile project(":LibUtilsJava")
    compile "com.fasterxml.jackson.core:jackson-databind:2.6.7.1"
    compile "org.jsoup:jsoup:1.11.2"
    compile "net.coobird:thumbnailator:0.4.8"

    compile "com.google.apis:google-api-services-drive:v3-rev90-1.23.0"
    compile "com.google.oauth-client:google-oauth-client-jetty:1.23.0"
    compile "com.google.http-client:google-http-client-jackson2:1.23.0"
    compile "com.google.guava:guava:20.0"   // 20.0 needed by google-api-services-drive

    compile "com.google.dagger:dagger:2.11"
    annotationProcessor "com.google.dagger:dagger-compiler:2.11"

    compile "com.google.auto.factory:auto-factory:1.0-beta5"
    annotationProcessor "com.google.auto.factory:auto-factory:1.0-beta5"

    testCompile "junit:junit:4.10"
    testCompile "com.google.truth:truth:0.31"
    testCompile "org.mockito:mockito-core:2.2.9"
    testCompile "com.google.guava:guava:20.0"
}

jar {
    manifest {
        attributes(
            "Main-Class": "com.alflabs.rig4.EntryPoint",
        )
    }
}

// Build a "fat" jar with all the dependencies.
task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = "all"
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

compileJava {
    project.mkdir(dagger.generatedSrcDir)
    // Options are listed in https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.CompileOptions.html
    // Note: becomes generatedSourceOutputDirectory in/after Gradle 6.6.1
    def f = new File(project.projectDir, dagger.generatedSrcDir)
    logger.warn("Dagger generated src dir = " + f.absolutePath)
    options.annotationProcessorGeneratedSourcesDirectory = f
    outputs.dir(dagger.generatedSrcDir)

    // Generate a resource file with the jar version + git head hash
    // (this file should be in gitignore).
    def versionDir  = new File("$buildDir", "../src/main/resources/com/alflabs/rig4").getCanonicalFile()
    if (!versionDir.isDirectory()) {
        logger.warn("Version file: creating directory " + versionDir.getPath())
        versionDir.mkdirs()
    }
    def versionFile = new File(versionDir, "version.txt")
    logger.info("Version file: " + versionFile.getPath())

    def git
    try {
        git = Grgit.open(dir: ".")
    } catch (Exception e) {
        git = Grgit.open(dir: "..")
    }
    def revision = git.head().abbreviatedId
    versionFile.write(project.version + "-" + revision)
}

clean {
    delete dagger.generatedSrcDir
}

task run(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "com.alflabs.rig4.EntryPoint"
}
